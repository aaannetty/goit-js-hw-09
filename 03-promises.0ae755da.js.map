{"mappings":"oeAAA,MAAMA,EAAc,CAClBC,aAAcC,SAASC,cAAc,kBACrCC,YAAaF,SAASC,cAAc,iBACpCE,cAAeH,SAASC,cAAc,mBACtCG,UAAWJ,SAASC,cAAc,gBAClCI,YAAaL,SAASC,cAAc,U,iBCAtC,SAASK,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KACLN,EAEFI,EAAI,C,SAAEN,E,MAAUC,IAGhBM,EAAI,C,SAAEP,E,MAAUC,GAAQ,GAEzBA,EAAM,G,CAuBbV,EAAYO,YAAYW,iBAAiB,UAnBpBC,IACnBA,EAAEC,iBACF,MAAMC,EAASF,EAAEG,OAAOC,SAASF,OAAOG,MACxC,IAAIC,EAAQC,OAAOP,EAAEG,OAAOC,SAASb,MAAMc,OAC3C,MAAMG,EAAOD,OAAOP,EAAEG,OAAOC,SAASI,KAAKH,OAE3C,IAAK,IAAII,EAAI,EAAGA,GAAKP,EAAQO,GAAK,EAChCpB,EAAcoB,EAAGH,GACdI,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAAC,OAAOC,QAAQ,sBAAsBvB,QAAeC,MAAU,IAE/DuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAC,OAAOG,QAAQ,qBAAqBzB,QAAeC,MAAU,IAEjEe,GAASE,EAEXR,EAAEG,OAAOa,OAAO","sources":["src/js/refsPromise.js","src/js/03-promises.js"],"sourcesContent":["const refsPromise = {\n  promiseDelay: document.querySelector('[name=\"delay\"]'),\n  promiseStep: document.querySelector('[name=\"step\"]'),\n  promiseAmount: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('.form button'),\n  formPromise: document.querySelector('.form'),\n};\nexport { refsPromise };\n","import { refsPromise } from './refsPromise';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nlet currentDelay;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        res({ position, delay });\n      } else {\n        // Reject\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst onSubmitForm = e => {\n  e.preventDefault();\n  const amount = e.target.elements.amount.value;\n  let delay = Number(e.target.elements.delay.value);\n  const step = Number(e.target.elements.step.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(` Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(` Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n  e.target.reset();\n};\n\nrefsPromise.formPromise.addEventListener('submit', onSubmitForm);\n"],"names":["$347d38d0b4c20724$export$6ed5f6991ffb3d3f","promiseDelay","document","querySelector","promiseStep","promiseAmount","submitBtn","formPromise","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","addEventListener","e","preventDefault","amount","target","elements","value","delay1","Number","step","i","then","$iQIUW","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.0ae755da.js.map"}